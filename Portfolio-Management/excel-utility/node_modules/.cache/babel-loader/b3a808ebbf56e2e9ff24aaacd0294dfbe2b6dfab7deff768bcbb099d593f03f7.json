{"ast":null,"code":"// Calculate FIFO-based Realized Profit and Loss and Update Holdings\nexport function calculateFIFOAndHoldings(transactions) {\n  const buys = {}; // Tracks remaining buy quantities and costs for each ISIN\n  const realized = []; // Stores profit/loss for each sell transaction\n  const holdings = {}; // Tracks current holdings after accounting for buys and sells\n\n  transactions.forEach(t => {\n    if (t.type === \"Buy\") {\n      // Add buy transactions to the buys tracker\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: t.quantity,\n        cost: t.totalCost,\n        date: t.date\n      });\n\n      // Update holdings\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0\n        };\n      }\n      holdings[t.ISIN].quantity += t.quantity;\n      holdings[t.ISIN].totalCost += t.totalCost;\n      holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = t.quantity;\n      let sellValue = t.totalCost;\n      let buyCost = 0;\n\n      // Process sell transactions in FIFO order\n      while (sellQuantity > 0 && ((_buys$t$ISIN = buys[t.ISIN]) === null || _buys$t$ISIN === void 0 ? void 0 : _buys$t$ISIN.length) > 0) {\n        var _buys$t$ISIN;\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n        buyCost += usedQuantity / buy.quantity * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n\n        // Remove fully used buy entries\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date\n      });\n\n      // Update holdings after the sell\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= t.quantity;\n        holdings[t.ISIN].totalCost -= buyCost;\n\n        // Remove stock from holdings if quantity becomes zero\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n  return {\n    holdings: Object.values(holdings),\n    realized\n  };\n}","map":{"version":3,"names":["calculateFIFOAndHoldings","transactions","buys","realized","holdings","forEach","t","type","ISIN","push","quantity","cost","totalCost","date","stockName","avgCost","sellQuantity","sellValue","buyCost","_buys$t$ISIN","length","buy","usedQuantity","Math","min","shift","profit","Object","values"],"sources":["/Users/rusher/Portfolio-Management/excel-utility/src/utils/helpers.js"],"sourcesContent":["// Calculate FIFO-based Realized Profit and Loss and Update Holdings\nexport function calculateFIFOAndHoldings(transactions) {\n  const buys = {}; // Tracks remaining buy quantities and costs for each ISIN\n  const realized = []; // Stores profit/loss for each sell transaction\n  const holdings = {}; // Tracks current holdings after accounting for buys and sells\n\n  transactions.forEach((t) => {\n    if (t.type === \"Buy\") {\n      // Add buy transactions to the buys tracker\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: t.quantity,\n        cost: t.totalCost,\n        date: t.date,\n      });\n\n      // Update holdings\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0,\n        };\n      }\n      holdings[t.ISIN].quantity += t.quantity;\n      holdings[t.ISIN].totalCost += t.totalCost;\n      holdings[t.ISIN].avgCost =\n        holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = t.quantity;\n      let sellValue = t.totalCost;\n      let buyCost = 0;\n\n      // Process sell transactions in FIFO order\n      while (sellQuantity > 0 && buys[t.ISIN]?.length > 0) {\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n\n        buyCost += (usedQuantity / buy.quantity) * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n\n        // Remove fully used buy entries\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date,\n      });\n\n      // Update holdings after the sell\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= t.quantity;\n        holdings[t.ISIN].totalCost -= buyCost;\n\n        // Remove stock from holdings if quantity becomes zero\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost =\n            holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n\n  return { holdings: Object.values(holdings), realized };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}