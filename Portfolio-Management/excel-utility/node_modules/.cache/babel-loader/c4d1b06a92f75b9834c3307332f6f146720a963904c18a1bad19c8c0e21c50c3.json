{"ast":null,"code":"// Group transactions by ISIN and calculate aggregated data for Buy/Sell\nimport axios from \"axios\";\nasync function getStockPrice(date, symbol, ticker = \"NSE\") {\n  try {\n    let d = date.toISOString().split(\"T\")[0]; //first split by T to get the date and then take the first element of the array and then split by -\n    console.log(d);\n    const data = await axios.get(`https://eodhd.com/api/eod/${symbol}.${ticker}?from=${String(d)}&to=${String(d)}&api_token=673b87984c1849.71141183&fmt=json`\n    // \"https://eodhd.com/api/eod/INFY.NSE?from=2024-11-13&to=2024-11-16&api_token=673b87984c1849.71141183&fmt=json\"\n    );\n    return data[\"data\"][0][\"close\"] || 0;\n  } catch (err) {\n    console.log(err.message);\n  }\n}\nexport function groupByISIN(transactions, type) {\n  const filtered = transactions.filter(t => t.type === type);\n  return Object.values(filtered);\n}\n\n// Calculate Day-to-Day CAGR for each transaction and compute Portfolio CAGR\nexport async function calculateCAGRAndPortfolio(transactions) {\n  const buys = {}; // Track remaining buy quantities and costs\n  const realized = [];\n  const holdings = {};\n  const cagrList = []; // List to store individual CAGRs for portfolio CAGR calculation\n\n  transactions.forEach(t => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: +t.quantity,\n        cost: +t.totalCost,\n        date: t.date\n      });\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0,\n          valuation: 0,\n          startDate: t.date // Save the start date of the stock purchase\n        };\n      }\n      holdings[t.ISIN].quantity += Number(t.quantity);\n      holdings[t.ISIN].totalCost += Number(t.totalCost);\n      holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = +t.quantity;\n      let sellValue = +t.totalCost;\n      let buyCost = 0;\n      while (sellQuantity > 0 && ((_buys$t$ISIN = buys[t.ISIN]) === null || _buys$t$ISIN === void 0 ? void 0 : _buys$t$ISIN.length) > 0) {\n        var _buys$t$ISIN;\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n        buyCost += usedQuantity / buy.quantity * buy.cost;\n        buy.cost -= usedQuantity / buy.quantity * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date,\n        dayToDayCAGR: 0,\n        valuation: 0\n      });\n\n      // Update holdings\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= +t.quantity;\n        holdings[t.ISIN].totalCost -= +buyCost;\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n\n  // Calculate Day-to-Day CAGR\n  const updateCAGR = async function () {\n    for await (const h of Object.values(holdings)) {\n      const startDate = new Date(h.startDate);\n      let endDate = new Date();\n      endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 0) endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 6) endDate.setDate(endDate.getDate() - 1);\n      const daysHeld = (endDate - startDate) / (1000 * 3600 * 24); // Calculate days\n      const stockPrice = await getStockPrice(endDate, h.stockName);\n      const cagr = Math.pow(stockPrice / h.totalCost, 1 / daysHeld) - 1; // Replace this logic to handle daily calculations better\n      cagrList.push(cagr);\n      h.dayToDayCAGR = cagr.toFixed(4); // Adding the Day-to-Day CAGR to holdings\n      h.valuation = stockPrice;\n    }\n    for await (const r of realized) {\n      const startDate = new Date(r.date);\n      let endDate = new Date();\n      endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 0) endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 6) endDate.setDate(endDate.getDate() - 1);\n      const daysHeld = (endDate - startDate) / (1000 * 3600 * 24); // Calculate days\n      const stockPrice = await getStockPrice(endDate, r.stockName);\n      const cagr = Math.pow(stockPrice / (r.buyCost / r.sellQuantity), 1 / daysHeld) - 1; // Replace this logic to handle daily calculations better\n      cagrList.push(cagr);\n      r.dayToDayCAGR = cagr.toFixed(4); // Adding the Day-to-Day CAGR to holdings\n      r.valuation = stockPrice;\n    }\n  };\n  await updateCAGR();\n\n  // Portfolio CAGR (RMS of individual CAGRs)\n  const portfolioCAGR = Math.sqrt(cagrList.reduce((acc, c) => acc + Math.pow(c, 2), 0) / cagrList.length);\n  return {\n    holdings: Object.values(holdings),\n    realized,\n    portfolioCAGR\n  };\n}","map":{"version":3,"names":["axios","getStockPrice","date","symbol","ticker","d","toISOString","split","console","log","data","get","String","err","message","groupByISIN","transactions","type","filtered","filter","t","Object","values","calculateCAGRAndPortfolio","buys","realized","holdings","cagrList","forEach","ISIN","push","quantity","cost","totalCost","stockName","avgCost","valuation","startDate","Number","sellQuantity","sellValue","buyCost","_buys$t$ISIN","length","buy","usedQuantity","Math","min","shift","profit","dayToDayCAGR","updateCAGR","h","Date","endDate","setDate","getDate","getDay","daysHeld","stockPrice","cagr","pow","toFixed","r","portfolioCAGR","sqrt","reduce","acc","c"],"sources":["/Users/rusher/Portfolio-Management/excel-utility/src/utils/helpers.js"],"sourcesContent":["// Group transactions by ISIN and calculate aggregated data for Buy/Sell\nimport axios from \"axios\";\n\nasync function getStockPrice(date, symbol, ticker = \"NSE\") {\n  try {\n    let d = date.toISOString().split(\"T\")[0]; //first split by T to get the date and then take the first element of the array and then split by -\n    console.log(d);\n    const data = await axios.get(\n      `https://eodhd.com/api/eod/${symbol}.${ticker}?from=${String(\n        d\n      )}&to=${String(d)}&api_token=673b87984c1849.71141183&fmt=json`\n      // \"https://eodhd.com/api/eod/INFY.NSE?from=2024-11-13&to=2024-11-16&api_token=673b87984c1849.71141183&fmt=json\"\n    );\n\n    return data[\"data\"][0][\"close\"] || 0;\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nexport function groupByISIN(transactions, type) {\n  const filtered = transactions.filter((t) => t.type === type);\n\n  return Object.values(filtered);\n}\n\n// Calculate Day-to-Day CAGR for each transaction and compute Portfolio CAGR\nexport async function calculateCAGRAndPortfolio(transactions) {\n  const buys = {}; // Track remaining buy quantities and costs\n  const realized = [];\n  const holdings = {};\n  const cagrList = []; // List to store individual CAGRs for portfolio CAGR calculation\n\n  transactions.forEach((t) => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: +t.quantity,\n        cost: +t.totalCost,\n        date: t.date,\n      });\n\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0,\n          valuation: 0,\n          startDate: t.date, // Save the start date of the stock purchase\n        };\n      }\n\n      holdings[t.ISIN].quantity += Number(t.quantity);\n      holdings[t.ISIN].totalCost += Number(t.totalCost);\n      holdings[t.ISIN].avgCost =\n        holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = +t.quantity;\n      let sellValue = +t.totalCost;\n      let buyCost = 0;\n\n      while (sellQuantity > 0 && buys[t.ISIN]?.length > 0) {\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n\n        buyCost += (usedQuantity / buy.quantity) * buy.cost;\n        buy.cost -= (usedQuantity / buy.quantity) * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date,\n        dayToDayCAGR: 0,\n        valuation: 0,\n      });\n\n      // Update holdings\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= +t.quantity;\n        holdings[t.ISIN].totalCost -= +buyCost;\n\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost =\n            holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n\n  // Calculate Day-to-Day CAGR\n  const updateCAGR = async function () {\n    for await (const h of Object.values(holdings)) {\n      const startDate = new Date(h.startDate);\n      let endDate = new Date();\n      endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 0) endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 6) endDate.setDate(endDate.getDate() - 1);\n      const daysHeld = (endDate - startDate) / (1000 * 3600 * 24); // Calculate days\n      const stockPrice = await getStockPrice(endDate, h.stockName);\n\n      const cagr = Math.pow(stockPrice / h.totalCost, 1 / daysHeld) - 1; // Replace this logic to handle daily calculations better\n      cagrList.push(cagr);\n      h.dayToDayCAGR = cagr.toFixed(4); // Adding the Day-to-Day CAGR to holdings\n      h.valuation = stockPrice;\n    }\n\n    for await (const r of realized) {\n      const startDate = new Date(r.date);\n      let endDate = new Date();\n      endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 0) endDate.setDate(endDate.getDate() - 1);\n      if (endDate.getDay() === 6) endDate.setDate(endDate.getDate() - 1);\n      const daysHeld = (endDate - startDate) / (1000 * 3600 * 24); // Calculate days\n      const stockPrice = await getStockPrice(endDate, r.stockName);\n\n      const cagr =\n        Math.pow(stockPrice / (r.buyCost / r.sellQuantity), 1 / daysHeld) - 1; // Replace this logic to handle daily calculations better\n      cagrList.push(cagr);\n      r.dayToDayCAGR = cagr.toFixed(4); // Adding the Day-to-Day CAGR to holdings\n      r.valuation = stockPrice;\n    }\n  };\n\n  await updateCAGR();\n\n  // Portfolio CAGR (RMS of individual CAGRs)\n  const portfolioCAGR = Math.sqrt(\n    cagrList.reduce((acc, c) => acc + Math.pow(c, 2), 0) / cagrList.length\n  );\n\n  return { holdings: Object.values(holdings), realized, portfolioCAGR };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}