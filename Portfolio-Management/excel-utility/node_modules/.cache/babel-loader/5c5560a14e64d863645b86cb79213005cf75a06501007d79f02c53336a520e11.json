{"ast":null,"code":"// Group transactions by ISIN and calculate aggregated data for Buy/Sell\nexport function groupByISIN(transactions, type) {\n  const filtered = transactions.filter(t => t.type === type);\n  const grouped = {};\n  filtered.forEach(t => {\n    if (!grouped[t.ISIN]) {\n      grouped[t.ISIN] = {\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        quantity: 0,\n        totalCost: 0,\n        charges: 0\n      };\n    }\n    grouped[t.ISIN].quantity += t.quantity;\n    grouped[t.ISIN].totalCost += t.totalCost;\n    grouped[t.ISIN].charges += t.dpCharges + t.otherCharges;\n  });\n  return Object.values(grouped);\n}\n\n// Calculate FIFO-based Realized Profit and Loss\nexport function calculateFIFORealizedPnL(transactions) {\n  const buys = {}; // Tracks remaining buys for each ISIN\n  const realized = []; // Stores profit/loss for each sell transaction\n\n  transactions.forEach(t => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: t.quantity,\n        cost: t.totalCost\n      });\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = t.quantity;\n      let sellValue = Number(t.totalCost);\n      let buyCost = 0;\n\n      // Process sell in FIFO order\n      while (sellQuantity > 0 && ((_buys$t$ISIN = buys[t.ISIN]) === null || _buys$t$ISIN === void 0 ? void 0 : _buys$t$ISIN.length) > 0) {\n        var _buys$t$ISIN;\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n        buyCost += usedQuantity / buy.quantity * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift(); // Remove the fully used buy\n        }\n      }\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit\n      });\n    }\n  });\n  return realized;\n}\n\n// Calculate current holdings after all Buy and Sell transactions\nexport function calculateHoldings(transactions) {\n  const holdings = {};\n  transactions.forEach(t => {\n    if (!holdings[t.ISIN]) {\n      holdings[t.ISIN] = {\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        quantity: 0\n      };\n    }\n    holdings[t.ISIN].quantity += t.type === \"Buy\" ? t.quantity : -t.quantity;\n  });\n\n  // Filter stocks with positive quantity only\n  return Object.values(holdings).filter(h => h.quantity > 0);\n}\n\n// Calculate FIFO-based Realized Profit and Loss and Update Holdings\nexport function calculateFIFOAndHoldings(transactions) {\n  const buys = {}; // Tracks remaining buy quantities and costs for each ISIN\n  const realized = [];\n  const holdings = {};\n  transactions.forEach(t => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: t.quantity,\n        cost: t.totalCost,\n        date: t.date\n      });\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0\n        };\n      }\n      holdings[t.ISIN].quantity += t.quantity;\n      holdings[t.ISIN].totalCost += Number(t.totalCost); // Ensure totalCost is a number\n      holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      // Sell logic remains the same\n      let sellQuantity = +t.quantity;\n      let sellValue = +t.totalCost;\n      let buyCost = 0;\n      while (sellQuantity > 0 && ((_buys$t$ISIN2 = buys[t.ISIN]) === null || _buys$t$ISIN2 === void 0 ? void 0 : _buys$t$ISIN2.length) > 0) {\n        var _buys$t$ISIN2;\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n        buyCost += usedQuantity / buy.quantity * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date\n      });\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= t.quantity;\n        holdings[t.ISIN].totalCost -= buyCost;\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n  return {\n    holdings: Object.values(holdings),\n    realized\n  };\n}\n\n// Calculate Day-to-Day CAGR for each transaction and compute Portfolio CAGR\nexport function calculateCAGRAndPortfolio(transactions) {\n  const buys = {}; // Track remaining buy quantities and costs\n  const realized = [];\n  const holdings = {};\n  const cagrList = []; // List to store individual CAGRs for portfolio CAGR calculation\n\n  transactions.forEach(t => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: +t.quantity,\n        cost: +t.totalCost,\n        date: t.date\n      });\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0,\n          startDate: t.date,\n          // Save the start date of the stock purchase\n          endDate: null // Will update after sell\n        };\n      }\n      holdings[t.ISIN].quantity += +t.quantity;\n      holdings[t.ISIN].totalCost += +t.totalCost;\n      holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = +t.quantity;\n      let sellValue = +t.totalCost;\n      let buyCost = 0;\n      while (sellQuantity > 0 && ((_buys$t$ISIN3 = buys[t.ISIN]) === null || _buys$t$ISIN3 === void 0 ? void 0 : _buys$t$ISIN3.length) > 0) {\n        var _buys$t$ISIN3;\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n        buyCost += usedQuantity / buy.quantity * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date\n      });\n\n      // Update holdings\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= +t.quantity;\n        holdings[t.ISIN].totalCost -= +buyCost;\n        holdings[t.ISIN].endDate = t.date; // Set end date after sell\n\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost = holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n\n  // Calculate Day-to-Day CAGR for Holdings\n  Object.values(holdings).forEach(h => {\n    const startDate = new Date(h.startDate);\n    const endDate = new Date(h.endDate || new Date());\n    const daysHeld = (endDate - startDate) / (1000 * 3600 * 24); // Calculate days\n    const cagr = Math.pow(h.totalCost / (h.totalCost - h.totalCost), 1 / daysHeld) - 1; // Replace this logic to handle daily calculations better\n    cagrList.push(cagr);\n    h.dayToDayCAGR = cagr.toFixed(4); // Adding the Day-to-Day CAGR to holdings\n  });\n\n  // Portfolio CAGR (RMS of individual CAGRs)\n  const portfolioCAGR = Math.sqrt(cagrList.reduce((acc, c) => acc + Math.pow(c, 2), 0) / cagrList.length);\n  return {\n    holdings: Object.values(holdings),\n    realized,\n    portfolioCAGR\n  };\n}","map":{"version":3,"names":["groupByISIN","transactions","type","filtered","filter","t","grouped","forEach","ISIN","stockName","quantity","totalCost","charges","dpCharges","otherCharges","Object","values","calculateFIFORealizedPnL","buys","realized","push","cost","sellQuantity","sellValue","Number","buyCost","_buys$t$ISIN","length","buy","usedQuantity","Math","min","shift","profit","calculateHoldings","holdings","h","calculateFIFOAndHoldings","date","avgCost","_buys$t$ISIN2","calculateCAGRAndPortfolio","cagrList","startDate","endDate","_buys$t$ISIN3","Date","daysHeld","cagr","pow","dayToDayCAGR","toFixed","portfolioCAGR","sqrt","reduce","acc","c"],"sources":["/Users/rusher/Portfolio-Management/excel-utility/src/utils/helpers.js"],"sourcesContent":["// Group transactions by ISIN and calculate aggregated data for Buy/Sell\nexport function groupByISIN(transactions, type) {\n  const filtered = transactions.filter((t) => t.type === type);\n  const grouped = {};\n\n  filtered.forEach((t) => {\n    if (!grouped[t.ISIN]) {\n      grouped[t.ISIN] = {\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        quantity: 0,\n        totalCost: 0,\n        charges: 0,\n      };\n    }\n    grouped[t.ISIN].quantity += t.quantity;\n    grouped[t.ISIN].totalCost += t.totalCost;\n    grouped[t.ISIN].charges += t.dpCharges + t.otherCharges;\n  });\n\n  return Object.values(grouped);\n}\n\n// Calculate FIFO-based Realized Profit and Loss\nexport function calculateFIFORealizedPnL(transactions) {\n  const buys = {}; // Tracks remaining buys for each ISIN\n  const realized = []; // Stores profit/loss for each sell transaction\n\n  transactions.forEach((t) => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({ quantity: t.quantity, cost: t.totalCost });\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = t.quantity;\n      let sellValue = Number(t.totalCost);\n      let buyCost = 0;\n\n      // Process sell in FIFO order\n      while (sellQuantity > 0 && buys[t.ISIN]?.length > 0) {\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n\n        buyCost += (usedQuantity / buy.quantity) * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift(); // Remove the fully used buy\n        }\n      }\n\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n      });\n    }\n  });\n\n  return realized;\n}\n\n// Calculate current holdings after all Buy and Sell transactions\nexport function calculateHoldings(transactions) {\n  const holdings = {};\n\n  transactions.forEach((t) => {\n    if (!holdings[t.ISIN]) {\n      holdings[t.ISIN] = { ISIN: t.ISIN, stockName: t.stockName, quantity: 0 };\n    }\n    holdings[t.ISIN].quantity += t.type === \"Buy\" ? t.quantity : -t.quantity;\n  });\n\n  // Filter stocks with positive quantity only\n  return Object.values(holdings).filter((h) => h.quantity > 0);\n}\n\n// Calculate FIFO-based Realized Profit and Loss and Update Holdings\nexport function calculateFIFOAndHoldings(transactions) {\n  const buys = {}; // Tracks remaining buy quantities and costs for each ISIN\n  const realized = [];\n  const holdings = {};\n\n  transactions.forEach((t) => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: t.quantity,\n        cost: t.totalCost,\n        date: t.date,\n      });\n\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0,\n        };\n      }\n      holdings[t.ISIN].quantity += t.quantity;\n      holdings[t.ISIN].totalCost += Number(t.totalCost); // Ensure totalCost is a number\n      holdings[t.ISIN].avgCost =\n        holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      // Sell logic remains the same\n      let sellQuantity = +t.quantity;\n      let sellValue = +t.totalCost;\n      let buyCost = 0;\n\n      while (sellQuantity > 0 && buys[t.ISIN]?.length > 0) {\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n\n        buyCost += (usedQuantity / buy.quantity) * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date,\n      });\n\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= t.quantity;\n        holdings[t.ISIN].totalCost -= buyCost;\n\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost =\n            holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n\n  return { holdings: Object.values(holdings), realized };\n}\n\n// Calculate Day-to-Day CAGR for each transaction and compute Portfolio CAGR\nexport function calculateCAGRAndPortfolio(transactions) {\n  const buys = {}; // Track remaining buy quantities and costs\n  const realized = [];\n  const holdings = {};\n  const cagrList = []; // List to store individual CAGRs for portfolio CAGR calculation\n\n  transactions.forEach((t) => {\n    if (t.type === \"Buy\") {\n      if (!buys[t.ISIN]) buys[t.ISIN] = [];\n      buys[t.ISIN].push({\n        quantity: +t.quantity,\n        cost: +t.totalCost,\n        date: t.date,\n      });\n\n      if (!holdings[t.ISIN]) {\n        holdings[t.ISIN] = {\n          ISIN: t.ISIN,\n          stockName: t.stockName,\n          quantity: 0,\n          totalCost: 0,\n          avgCost: 0,\n          startDate: t.date, // Save the start date of the stock purchase\n          endDate: null, // Will update after sell\n        };\n      }\n\n      holdings[t.ISIN].quantity += +t.quantity;\n      holdings[t.ISIN].totalCost += +t.totalCost;\n      holdings[t.ISIN].avgCost =\n        holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n    } else if (t.type === \"Sell\") {\n      let sellQuantity = +t.quantity;\n      let sellValue = +t.totalCost;\n      let buyCost = 0;\n\n      while (sellQuantity > 0 && buys[t.ISIN]?.length > 0) {\n        const buy = buys[t.ISIN][0];\n        const usedQuantity = Math.min(sellQuantity, buy.quantity);\n\n        buyCost += (usedQuantity / buy.quantity) * buy.cost;\n        buy.quantity -= usedQuantity;\n        sellQuantity -= usedQuantity;\n\n        if (buy.quantity === 0) {\n          buys[t.ISIN].shift();\n        }\n      }\n\n      const profit = sellValue - buyCost;\n      realized.push({\n        ISIN: t.ISIN,\n        stockName: t.stockName,\n        sellQuantity: t.quantity,\n        sellValue,\n        buyCost,\n        profit,\n        date: t.date,\n      });\n\n      // Update holdings\n      if (holdings[t.ISIN]) {\n        holdings[t.ISIN].quantity -= +t.quantity;\n        holdings[t.ISIN].totalCost -= +buyCost;\n        holdings[t.ISIN].endDate = t.date; // Set end date after sell\n\n        if (holdings[t.ISIN].quantity === 0) {\n          delete holdings[t.ISIN];\n        } else {\n          holdings[t.ISIN].avgCost =\n            holdings[t.ISIN].totalCost / holdings[t.ISIN].quantity;\n        }\n      }\n    }\n  });\n\n  // Calculate Day-to-Day CAGR for Holdings\n  Object.values(holdings).forEach((h) => {\n    const startDate = new Date(h.startDate);\n    const endDate = new Date(h.endDate || new Date());\n    const daysHeld = (endDate - startDate) / (1000 * 3600 * 24); // Calculate days\n    const cagr =\n      Math.pow(h.totalCost / (h.totalCost - h.totalCost), 1 / daysHeld) - 1; // Replace this logic to handle daily calculations better\n    cagrList.push(cagr);\n    h.dayToDayCAGR = cagr.toFixed(4); // Adding the Day-to-Day CAGR to holdings\n  });\n\n  // Portfolio CAGR (RMS of individual CAGRs)\n  const portfolioCAGR = Math.sqrt(\n    cagrList.reduce((acc, c) => acc + Math.pow(c, 2), 0) / cagrList.length\n  );\n\n  return { holdings: Object.values(holdings), realized, portfolioCAGR };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}